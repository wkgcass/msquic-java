import org.gradle.api.tasks.testing.logging.TestLogEvent

buildscript {
    def PNI_VERSION = '21.0.0.18'
    ext.set("PNI_VERSION", PNI_VERSION)

    repositories {
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        classpath group: 'io.vproxy', name: 'pni-exec', version: PNI_VERSION
    }
}

plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id 'com.github.johnrengelman.shadow' version '7.1.2' apply false
}

def PNI_API_VERSION = project.PNI_VERSION

group = 'io.vproxy'
version = '1.0-SNAPSHOT'

repositories {
    mavenLocal()
    mavenCentral()
}

subprojects {
    apply plugin: 'java-library'

    group 'io.vproxy'
    version rootProject.version

    java {
        sourceCompatibility = '21'
        targetCompatibility = '21'
    }

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
        options.incremental = false
        options.compilerArgs += '--enable-preview'
    }
    tasks.withType(JavaExec) {
        jvmArgs += '--enable-preview'
        jvmArgs += '--enable-native-access=ALL-UNNAMED'
        javaLauncher.set(javaToolchains.launcherFor(java.toolchain))
    }
    tasks.withType(Test) {
        jvmArgs += '--enable-preview'
        jvmArgs += '--enable-native-access=ALL-UNNAMED'

        testLogging {
            showStandardStreams = true
            events TestLogEvent.FAILED, TestLogEvent.PASSED, TestLogEvent.SKIPPED, TestLogEvent.STARTED
            maxGranularity 100
            exceptionFormat "full"
            showCauses true
            showExceptions true
            showStackTraces true
        }
    }

    repositories {
        mavenLocal()
        mavenCentral()
    }

    task javadocJar(type: Jar) {
        archiveClassifier = 'javadoc'
        from "$buildDir/docs/javadoc"
    }

    tasks.withType(GenerateModuleMetadata) {
        enabled = false
    }
}

def isGraalBuild() {
    var path = java.nio.file.Path.of(project.rootProject.projectDir.getAbsolutePath(), "is-graal-build")
    return java.nio.file.Files.readString(path).trim() == "true"
}

project(':template') {
    dependencies {
        implementation 'io.vproxy:pni-api-jdk21:' + PNI_API_VERSION
    }
    compileJava {
        options.compilerArgs += '-parameters'
    }
    task pniGenerate1() {
        dependsOn compileJava

        def workingDir = project.rootProject.rootDir.getAbsolutePath()
        def gen = new io.vproxy.pni.exec.Generator(
            new io.vproxy.pni.exec.CompilerOptions()
                .setClasspath(List.of(workingDir + '/template/build/classes/java/main'))
                .setJavaOutputBaseDirectory(workingDir + '/core/src/main/generated')
                .setCOutputDirectory(workingDir + '/core/src/main/c-generated')
                .setCompilationFlag(io.vproxy.pni.exec.CompilationFlag.TYPE_NAME_PREFIX, "PNI")
                .setCompilationFlag(io.vproxy.pni.exec.CompilationFlag.RELEASE_PNI_H_FILE, null)
                .setCompilationFlag(io.vproxy.pni.exec.CompilationFlag.RELEASE_PNI_C_FILE, null)
                .setCompilationFlag(io.vproxy.pni.exec.CompilationFlag.RELEASE_JNI_H_MOCK_FILE, null)
        )

        doLast {
            gen.generate()
        }
    }
    task pniGenerate2() {
        dependsOn compileJava

        def workingDir = project.rootProject.rootDir.getAbsolutePath()
        def gen = new io.vproxy.pni.exec.Generator(
            new io.vproxy.pni.exec.CompilerOptions()
                .setClasspath(List.of(workingDir + '/template/build/classes/java/main'))
                .setJavaOutputBaseDirectory(workingDir + '/core/src/main/generated-graal')
                .setCOutputDirectory(workingDir + '/core/src/main/c-generated-graal')
                .setCompilationFlag(io.vproxy.pni.exec.CompilationFlag.TYPE_NAME_PREFIX, "PNI")
                .setCompilationFlag(io.vproxy.pni.exec.CompilationFlag.RELEASE_PNI_H_FILE, null)
                .setCompilationFlag(io.vproxy.pni.exec.CompilationFlag.RELEASE_PNI_C_FILE, null)
                .setCompilationFlag(io.vproxy.pni.exec.CompilationFlag.RELEASE_JNI_H_MOCK_FILE, null)
                .setCompilationFlag(io.vproxy.pni.exec.CompilationFlag.GRAAL_NATIVE_IMAGE_FEATURE, "io.vproxy.msquic.Feature")
                .setCompilationFlag(io.vproxy.pni.exec.CompilationFlag.GRAAL_C_ENTRYPOINT_LITERAL_UPCALL, null)
        )

        doLast {
            gen.generate()
        }
    }
    task pniGenerate() {
        dependsOn pniGenerate1
        dependsOn pniGenerate2
    }
    task pniCompile(type: Exec) {
        workingDir project.rootProject.rootDir.getAbsolutePath() + '/core/src/main/c'
        commandLine './make-quic.sh'
        if (isGraalBuild()) {
            environment["GRAAL"] = "true"
        }

        dependsOn pniGenerate
    }
}

project(':core') {
    if (isGraalBuild()) {
        sourceSets {
            main {
                java {
                    srcDirs = ['src/main/java', 'src/main/generated-graal', 'src/main/module-info']
                }
            }
        }
    } else {
        sourceSets {
            main {
                java {
                    srcDirs = ['src/main/java', 'src/main/generated', 'src/main/module-info']
                }
            }
        }
    }
    dependencies {
        api 'io.vproxy:pni-api-jdk21:' + PNI_API_VERSION
        api 'io.vproxy:pni-api-graal:' + PNI_API_VERSION
        api 'io.vproxy:commons:1.2.0'
        compileOnly group: 'io.vproxy', name: 'graal-sdk-mock-nativeimage', version: '1.2.1'
        runtimeOnly group: 'io.vproxy', name: 'graal-sdk-mock-runtime', version: '1.2.1'
    }
}

project(':sample') {
    apply plugin: 'com.github.johnrengelman.shadow'

    dependencies {
        implementation project(':core')
    }
    jar {
        manifest {
            attributes 'Main-Class': 'io.vproxy.msquic.sample.Main'
        }
    }
    shadowJar {
        archiveFileName.set('sample.jar')
    }
    task runSampleClient(type: JavaExec) {
        standardInput = System.in

        classpath = sourceSets.main.runtimeClasspath
        mainClass = 'io.vproxy.msquic.sample.Client'
        jvmArgs += '-Djava.library.path=' +
                project.rootProject.rootDir.getAbsolutePath() + '/core/src/main/c' +
                File.pathSeparator +
                System.getenv("MSQUIC_LD")
    }
    task runSampleServer(type: JavaExec) {
        standardInput = System.in

        classpath = sourceSets.main.runtimeClasspath
        mainClass = 'io.vproxy.msquic.sample.Server'
        jvmArgs += '-Djava.library.path=' +
                project.rootProject.rootDir.getAbsolutePath() + '/core/src/main/c' +
                File.pathSeparator +
                System.getenv("MSQUIC_LD")

        dependsOn project(':template').tasks.pniCompile
        dependsOn compileJava
    }
    task buildSampleNativeImage(type: Exec) {
        executable 'native-image'
        def output = 'sample'
        output += '.run'
        args '-jar', './build/libs/sample.jar', '--features=io.vproxy.msquic.Feature',
                '--enable-preview', '--enable-native-access=ALL-UNNAMED',
                '-Ob', '--no-fallback',
                '-o', output

        dependsOn shadowJar
    }
    task runSampleNativeImage(type: Exec) {
        standardInput = System.in

        executable './sample.run'
        args '-Djava.library.path=' + project.rootProject.rootDir.getAbsolutePath() + '/core/src/main/c' +
                File.pathSeparator +
                System.getenv("MSQUIC_LD")
        if (System.getProperty("ARGS") != null) {
            args Arrays.asList(System.getProperty("ARGS").split(" "))
        }

        dependsOn project(':template').tasks.pniCompile
    }
}
